{"mappings":"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","sources":["<anon>","main.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirebeba\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirebeba\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $5jBcR = parcelRequire(\"5jBcR\");\nconst $efd3ba4ec2608b1d$var$PLAYER_RADIUS = 16;\nclass $efd3ba4ec2608b1d$var$GameScene extends Phaser.Scene {\n    constructor(){\n        super(\"scene-game\");\n        this.cursors;\n        this.player;\n        this.username;\n        this.colorsList = [\n            0x4ecdc4,\n            0xff6b6b,\n            0xf7b32b,\n            0x1a535c,\n            0xb388eb\n        ];\n        this.remotePlayers = new Map();\n    }\n    create() {\n        // Create circle and enable physics\n        let x = Math.random() * 800;\n        let y = Math.random() * 600;\n        this.player = this.add.circle(x, y, $efd3ba4ec2608b1d$var$PLAYER_RADIUS, this.colorsList[Math.floor(Math.random() * 5)] // Random color from colorsList\n        );\n        this.physics.add.existing(this.player);\n        this.player.body.setCollideWorldBounds(true);\n        this.cursors = this.input.keyboard.createCursorKeys();\n        (0, $5jBcR.default).onPlayerPositionUpdate = (position)=>{\n            if (this.remotePlayers.has(position.username)) {\n                let player = this.remotePlayers.get(position.username);\n                player.x = position.x;\n                player.y = position.y;\n            }\n        };\n        (0, $5jBcR.default).onPlayerJoining = (newPlayer)=>{\n            const circle = this.add.circle(newPlayer.x, newPlayer.y, $efd3ba4ec2608b1d$var$PLAYER_RADIUS, this.colorsList[Math.floor(Math.random() * 5)]);\n            this.remotePlayers.set(newPlayer.username, newPlayer);\n        };\n        console.log(\".connect called\");\n        (0, $5jBcR.default).connect();\n        this.sendPlayerPosition();\n    }\n    update() {\n        let speed = 3;\n        let moved = false;\n        if (this.cursors.left.isDown) {\n            this.player.x -= speed;\n            moved = true;\n        }\n        if (this.cursors.right.isDown) {\n            this.player.x += speed;\n            moved = true;\n        }\n        if (this.cursors.up.isDown) {\n            this.player.y -= speed;\n            moved = true;\n        }\n        if (this.cursors.down.isDown) {\n            this.player.y += speed;\n            moved = true;\n        }\n        if (moved) this.sendPlayerPosition();\n    }\n    sendPlayerPosition() {\n        (0, $5jBcR.default).sendPlayerPosition({\n            x: this.player.x,\n            y: this.player.y,\n            playerId: this.playerId\n        });\n    }\n}\nconst $efd3ba4ec2608b1d$var$config = {\n    type: Phaser.AUTO,\n    width: 800,\n    height: 600,\n    parent: 'game-container',\n    backgroundColor: 0x000000,\n    physics: {\n        default: 'arcade',\n        arcade: {\n            debug: false\n        }\n    },\n    scene: [\n        $efd3ba4ec2608b1d$var$GameScene\n    ]\n};\nnew Phaser.Game($efd3ba4ec2608b1d$var$config);\n\n\n//# sourceMappingURL=dummy.c0094ef0.js.map\n","import gameWebSocket from './webSoc.js';\r\n\r\nconst PLAYER_RADIUS = 16;\r\nclass GameScene extends Phaser.Scene {\r\n    constructor() {\r\n        super(\"scene-game\");\r\n        this.cursors;\r\n        this.player;\r\n        this.username;\r\n        this.colorsList = [0x4ecdc4, 0xff6b6b, 0xf7b32b, 0x1a535c, 0xb388eb];\r\n        this.remotePlayers = new Map();\r\n    }\r\n\r\n    create() {\r\n        // Create circle and enable physics\r\n        let x = Math.random() * 800;\r\n        let y = Math.random() * 600;\r\n        this.player = this.add.circle(\r\n            x, // X coordinate between 0 and 800\r\n            y, // Y coordinate between 0 and 600\r\n            PLAYER_RADIUS,\r\n            this.colorsList[Math.floor(Math.random() * 5)] // Random color from colorsList\r\n        );\r\n        this.physics.add.existing(this.player);\r\n        this.player.body.setCollideWorldBounds(true);\r\n\r\n        this.cursors = this.input.keyboard.createCursorKeys();\r\n\r\n        gameWebSocket.onPlayerPositionUpdate = (position) => {\r\n            if (this.remotePlayers.has(position.username)) {\r\n                let player = this.remotePlayers.get(position.username)\r\n                player.x = position.x;\r\n                player.y = position.y;\r\n            }\r\n        };\r\n\r\n        gameWebSocket.onPlayerJoining = (newPlayer) => {\r\n\r\n            const circle = this.add.circle(\r\n                newPlayer.x,\r\n                newPlayer.y,\r\n                PLAYER_RADIUS,\r\n                this.colorsList[Math.floor(Math.random() * 5)]\r\n            );\r\n            this.remotePlayers.set(newPlayer.username, newPlayer);\r\n        }\r\n\r\n        console.log(\".connect called\");\r\n        gameWebSocket.connect();\r\n\r\n        this.sendPlayerPosition();\r\n    }\r\n\r\n    update() {\r\n        let speed = 3;\r\n        let moved = false;\r\n        if (this.cursors.left.isDown) {\r\n            this.player.x -= speed;\r\n            moved = true;\r\n        }\r\n        if (this.cursors.right.isDown) {\r\n            this.player.x += speed;\r\n            moved = true;\r\n        }\r\n        if (this.cursors.up.isDown) {\r\n            this.player.y -= speed;\r\n            moved = true;\r\n        }\r\n        if (this.cursors.down.isDown) {\r\n            this.player.y += speed;\r\n            moved = true;\r\n        }\r\n\r\n        if (moved) {\r\n            this.sendPlayerPosition();\r\n        }\r\n    }\r\n\r\n    sendPlayerPosition() {\r\n        gameWebSocket.sendPlayerPosition({\r\n            x: this.player.x,\r\n            y: this.player.y,\r\n            playerId: this.playerId\r\n        })\r\n    }\r\n}\r\n\r\nconst config = {\r\n    type: Phaser.AUTO,\r\n    width: 800,\r\n    height: 600,\r\n    parent: 'game-container',\r\n    backgroundColor: 0x000000, // Use black (or another valid color)\r\n    physics: {\r\n        default: 'arcade',\r\n        arcade: {\r\n            debug: false\r\n        }\r\n    },\r\n    scene: [GameScene]\r\n};\r\n\r\nnew Phaser.Game(config);"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$5jBcR","$efd3ba4ec2608b1d$var$GameScene","Phaser","Scene","constructor","cursors","player","username","colorsList","remotePlayers","Map","create","x","Math","random","y","add","circle","floor","physics","existing","body","setCollideWorldBounds","input","keyboard","createCursorKeys","default","onPlayerPositionUpdate","position","has","get","onPlayerJoining","newPlayer","set","console","log","connect","sendPlayerPosition","update","moved","left","isDown","right","up","down","playerId","$efd3ba4ec2608b1d$var$config","type","AUTO","width","height","parent","backgroundColor","arcade","debug","scene","Game"],"version":3,"file":"dummy.c0094ef0.js.map"}